# define PI           3.14159265358979323846
# define EPI          0.000000001
template <class F>
struct Point {
    F x, y;
    Point() : x(0), y(0) {}
    Point(const F& x, const F& y) : x(x), y(y) {}

    void swap(Point& other) { using std::swap; swap(x, other.x); swap(y, other.y); }
    template <class F1> explicit operator Point<F1> () const {
        return Point<F1>(static_cast<F1>(x), static_cast<F1>(y)); }
    template <class F1> Point& operator = (const Point<F1>& other) {
        x = other.x; y = other.y; return *this; }
    template <class F1> Point& operator += (const Point<F1>& other) {
        x += other.x; y += other.y; return *this; }
    template <class F1> Point& operator -= (const Point<F1>& other) {
        x -= other.x; y -= other.y; return *this; }
    template <class F1> Point& operator *= (const F1& factor) {
        x *= factor; y *= factor; return *this; }
    template <class F1> Point& operator /= (const F1& factor) {
        x /= factor; y /= factor; return *this; }
};

template <class F> istream& operator >> (istream& is, Point<F>& point) {
    return is >> point.x >> point.y; }
template <class F> ostream& operator << (ostream& os, const Point<F>& point) {
    return os << point.x << ' ' << point.y; }

template <class F> inline Point<F> makePoint(const F& x, const F& y) { return Point<F>(x, y); }
template <class F> void swap(Point<F>& lhs, Point<F>& rhs) { lhs.swap(rhs); }

#define FUNC1(name, arg, expr) \
template <class F> inline auto name(const arg) -> decltype(expr) { return expr; }
#define FUNC2(name, arg1, arg2, expr) \
template <class F1, class F2> \
inline auto name(const arg1, const arg2) -> decltype(expr) { return expr; }
#define FUNC3(name, arg1, arg2, arg3, expr) \
template <class F1, class F2, class F3> \
inline auto name(const arg1, const arg2, const arg3) -> decltype(expr) { return expr; }

FUNC1(operator -, Point<F>& point, makePoint(-point.x, -point.y))
FUNC2(operator +, Point<F1>& lhs, Point<F2>& rhs, makePoint(lhs.x + rhs.x, lhs.y + rhs.y))
FUNC2(operator -, Point<F1>& lhs, Point<F2>& rhs, makePoint(lhs.x - rhs.x, lhs.y - rhs.y))
FUNC2(operator *, F1& factor, Point<F2>& rhs, makePoint(factor * rhs.x, factor * rhs.y))
FUNC2(operator *, Point<F1>& lhs, F2& factor, makePoint(lhs.x * factor, lhs.y * factor))
FUNC2(operator /, Point<F1>& lhs, F2& factor, makePoint(lhs.x / factor, lhs.y / factor))

FUNC2(operator *, Point<F1>& lhs, Point<F2>& rhs, lhs.x * rhs.x + lhs.y * rhs.y)
FUNC2(operator ^, Point<F1>& lhs, Point<F2>& rhs, lhs.x * rhs.y - lhs.y * rhs.x)

// < 0 if rhs <- lhs counter-clockwise, 0 if collinear, > 0 if clockwise.
FUNC2(ccw, Point<F1>& lhs, Point<F2>& rhs, rhs ^ lhs)
FUNC3(ccw, Point<F1>& lhs, Point<F2>& rhs, Point<F3>& origin, ccw(lhs - origin, rhs - origin))

FUNC2(operator ==, Point<F1>& lhs, Point<F2>& rhs, lhs.x == rhs.x && lhs.y == rhs.y)
FUNC2(operator !=, Point<F1>& lhs, Point<F2>& rhs, !(lhs == rhs))

#define COMPARE(v) \
FUNC2(operator v, Point<F1>& lhs, Point<F2>& rhs, \
lhs.y v rhs.y || (lhs.y == rhs.y && lhs.x v rhs.x))
COMPARE(<) COMPARE(>) COMPARE(<=) COMPARE(>=)
#undef COMPARE

// Angles and rotations (counter-clockwise).
FUNC1(angle, Point<F>& point, atan2(point.y, point.x))
FUNC2(angle, Point<F1>& lhs, Point<F2>& rhs, atan2(lhs ^ rhs, lhs * rhs))
FUNC3(angle, Point<F1>& lhs, Point<F2>& rhs, Point<F3>& origin,
      angle(lhs - origin, rhs - origin))
FUNC3(rotate, Point<F1>& point, F2& angleSin, F3& angleCos,
      makePoint(angleCos * point.x - angleSin * point.y,
                angleSin * point.x + angleCos * point.y))
FUNC2(rotate, Point<F1>& point, F2& angle, rotate(point, sin(angle), cos(angle)))
FUNC3(rotate, Point<F1>& point, F2& angle, Point<F3>& origin,
      origin + rotate(point - origin, angle))
FUNC1(perp, Point<F>& point, makePoint(-point.y, point.x))

// Distances.
FUNC1(abs, Point<F>& point, point * point)
FUNC1(norm, Point<F>& point, sqrt(abs(point)))
FUNC2(dist, Point<F1>& lhs, Point<F2>& rhs, norm(lhs - rhs))
FUNC2(dist2, Point<F1>& lhs, Point<F2>& rhs, abs(lhs - rhs))
FUNC2(bisector, Point<F1>& lhs, Point<F2>& rhs, lhs * norm(rhs) + rhs * norm(lhs))

#undef FUNC1
#undef FUNC2
#undef FUNC3

// Inversion.
template <class F1, class F2, class F3>
void inversion(const Point<F1>& point, const F2& radius, Point<F3>& res) {
    if (point == Point<F1>(0, 0)) res = Point<F3>();
    else res = point * (static_cast<F3>(radius * radius)) / abs(point);
}
template <class F1, class F2, class F3, class F4>
void inversion(const Point<F1>& point, const F2& radius, const Point<F3>& origin,
               Point<F4>& res) {
    inversion(point - origin, radius, res);
    res += origin;
}

template <class F1, class F2> using distF = decltype(sqrt(F1() + F2()));

template <class F>
struct Line {
    Point<F> a, ab;
    Line() : a(), ab() {}
    Line(const Point<F>& a, const Point<F>& b, bool twoPoints)
            : a(a), ab(twoPoints ? b - a : b) {}
    Line(const F& xa, const F& ya, const F& xb, const F& yb)
            : a(xa, ya), ab(xb - xa, yb - ya) {}

    void swap(Line& other) { using std::swap; swap(a, other.a); swap(ab, other.ab); }
    template <class F1> explicit operator Line<F1> () const {
        return Line<F1>(Point<F1>(a), Point<F1>(ab), false); }
    template <class F1> Line& operator = (const Line<F1>& other) {
        a = other.a; ab = other.ab; return *this; }

    Point<F> b() const { return a + ab; }
    operator bool () const { return ab != Point<F>(); }
};

template <class F> int read(Line<F>& line) {
    int res = read(line.a, line.ab) / 2;
    return line.ab -= line.a, res;
}
template <class F> int write(const Line<F>& line) { return write(line.a, line.b()); }

template <class F>
inline Line<F> makeLine(const Point<F>& a, const Point<F>& b, bool twoPoints = true) {
    return Line<F>(a, b, twoPoints);
}

template <class F> void swap(Line<F>& lhs, Line<F>& rhs) { lhs.swap(rhs); }

template <class F1, class F2>
distF<F1, F2> distLine(const Point<F1>& point, const Line<F2>& line) {
    if (!line) return dist(point, line.a);
    return abs((point - line.a) ^ line.ab) / norm(line.ab);
}

template <class F>
struct Circle {
    Point<F> o;
    F r;
    Circle() : o(), r() {}
    Circle(const Point<F>& a, int r) : o(a), r(r) {}
    template <class F1> explicit operator Circle<F1> () const {
        return Circle<F1>(Point<F1>(o), static_cast<F1>(r));
    }
    template <class F1> Circle& operator = (const Circle<F1>& other) {
        o = other.o; r = other.r; return *this;
    }
};

template<class F>
bool overlap(const Circle<F>& c1, const Circle<F>& c2) {
    return dist(c1.o, c2.o) <= c1.r + c2.r;
}
template <class F> inline Circle<F> makeCircle(const Point<F>& x, const F& y) { return Circle<F>(x, y); }

template <class F> using Polygon = vector<Point<F>>;
inline int prev(int i, int n) { return i == 0 ? n-1 : i-1; }
inline int next(int i, int n) { return i == n-1 ? 0 : i+1; }

template <class F>
Polygon<F> convexHull(Polygon<F> points) {
    sort(begin(points), end(points));
    Polygon<F> hull;
    hull.reserve(points.size() + 1);
    for (int phase = 0; phase < 2; ++phase) {  // Right, then left half.
        auto start = hull.size();
        for (auto& point : points) {
            while (hull.size() >= start+2 &&
                   ccw(point, hull.back(), hull[hull.size()-2]) <= 0)
                hull.pop_back();
            hull.push_back(point);
        }
        hull.pop_back();
        reverse(begin(points), end(points));
    }
    if (hull.size() == 2 && hull[0] == hull[1]) hull.pop_back();
    return hull;
}

template <class F1, class F2>
int pointVsConvexPolygon(const Point<F1>& point, const Polygon<F2>& poly, int top) {
    if (poly.empty()) return 1;
    if (poly.size() == 1) return point == poly[0] ? 0 : 1;
    if (point < poly[0] || point > poly[top]) return 1;
    auto orientation = ccw(point, poly[top], poly[0]);
    if (orientation == 0) {
        if (point == poly[0] || point == poly[top]) return 0;
        return top == 1 || top + 1 == poly.size() ? 0 : -1;
    } else if (orientation < 0) {
        auto itRight = lower_bound(begin(poly) + 1, begin(poly) + top, point);
        return sgn(ccw(itRight[0], point, itRight[-1]));
    } else {
        auto itLeft = upper_bound(poly.rbegin(), poly.rend() - top-1, point);
        return sgn(ccw(itLeft == poly.rbegin() ? poly[0] : itLeft[-1], point, itLeft[0]));
    }
}
